import shapefile
from shapely.geometry import shape, box, Polygon
import os
from pykml import parser
from lxml import etree

def calculate_bounding_rectangle(input_file):
    """
    Reads an input vector file (KML or SHP), calculates the bounding rectangle
    for the input polygons, and writes the result to an output file in the same format.

    Parameters:
    input_file (str): Path to the input vector file.

    Returns:
    str: Path to the output vector file.
    """
    
    base, ext = os.path.splitext(input_file)
    output_file = f"{base}_squared{ext}"
    
    if ext.lower() == '.shp':
        reader = shapefile.Reader(input_file)
        writer = shapefile.Writer(output_file, shapeType=shapefile.POLYGON)
        writer.fields = reader.fields[1:]

        for sr in reader.iterShapeRecords():
            geom = shape(sr.shape.__geo_interface__)
            minx, miny, maxx, maxy = geom.bounds
            bounding_rect = box(minx, miny, maxx, maxy)
            writer.record(*sr.record)
            writer.shape(bounding_rect)
        writer.close()
    
    elif ext.lower() == '.kml':
        with open(input_file, 'r') as file:
            root = parser.parse(file).getroot()
        
        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
        placemarks = root.findall('.//kml:Placemark', ns)
        
        for placemark in placemarks:
            polygon = placemark.find('.//kml:Polygon', ns)
            if polygon is not None:
                outer_boundary = polygon.find('.//kml:outerBoundaryIs/kml:LinearRing/kml:coordinates', ns)
                coords = outer_boundary.text.strip().split()
                points = [tuple(map(float, coord.split(','))) for coord in coords]
                geom = Polygon(points)
                minx, miny, maxx, maxy = geom.bounds
                bounding_rect = box(minx, miny, maxx, maxy)
                new_coords = " ".join([f"{coord[0]},{coord[1]},0" for coord in bounding_rect.exterior.coords])
                outer_boundary.text = new_coords

        with open(output_file, 'wb') as file:
            file.write(etree.tostring(root, pretty_print=True))
    
    return output_file

# Example usage
input_file = 'path/to/input_file.kml'  # or .shp
output_file = calculate_bounding_rectangle(input_file)
print(f"File di output generato: {output_file}")
