import shapefile
from shapely.geometry import shape, box
import os
from shutil import copyfile

def calculate_bounding_rectangles(input_file):
    """
    Reads an input SHP file containing polygons, calculates the bounding rectangles
    for each polygon, and writes the result to an output SHP file with the same name
    (appending '_squared' to the name) in the same directory, including prj and cpg files.

    Parameters:
    input_file (str): Path to the input SHP file.

    Returns:
    str: Path to the output SHP file.
    """
    
    base, ext = os.path.splitext(input_file)
    output_file = f"{base}_squared{ext}"
    
    if ext.lower() != '.shp':
        raise ValueError("Input file must be a SHP file.")
    
    reader = shapefile.Reader(input_file)
    writer = shapefile.Writer(output_file, shapeType=shapefile.POLYGON)
    writer.fields = reader.fields[1:]

    for sr in reader.iterShapeRecords():
        geom = shape(sr.shape.__geo_interface__)
        minx, miny, maxx, maxy = geom.bounds
        bounding_rect = box(minx, miny, maxx, maxy)
        writer.record(*sr.record)
        writer.shape(bounding_rect)
    writer.close()

    # Copy .prj and .cpg files
    prj_input = f"{base}.prj"
    prj_output = f"{base}_squared.prj"
    if os.path.exists(prj_input):
        copyfile(prj_input, prj_output)
    
    cpg_input = f"{base}.cpg"
    cpg_output = f"{base}_squared.cpg"
    if os.path.exists(cpg_input):
        copyfile(cpg_input, cpg_output)
    
    return output_file

# Esempio di utilizzo
input_file = 'path/to/input_file.shp'
output_file = calculate_bounding_rectangles(input_file)
print(f"File di output generato: {output_file}")
